package com.Sprout.Group.springboot.controller;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;
import com.google.api.client.http.javanet.NetHttpTransport;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Connection;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;
import com.google.api.client.json.jackson2.JacksonFactory;
import static utils.Constants.dbAddress;
import static utils.Constants.googleClientId;
import static utils.Constants.origins;

@CrossOrigin(origins = origins)
@RestController
@RequestMapping("/api")
public class LoginController {

	// Recieves a user token and returns true if they exist and false if they don't
	@PostMapping("/googlelogin")
	public boolean getLoginInfo(@RequestBody String idTokenString) throws GeneralSecurityException, IOException {
		
		GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(new NetHttpTransport(), new JacksonFactory())
				// Specify the CLIENT_ID of the app that accesses the backend:
				.setAudience(Collections.singletonList(googleClientId))
				.build();


		GoogleIdToken idToken = verifier.verify(idTokenString);
		if (idToken != null) {
			Payload payload = idToken.getPayload();

			// Get profile information from payload
			String userId = payload.getSubject();
			String email = payload.getEmail();
						
			return searchUser(userId, email);
			

		} else {
			System.out.println("Invalid ID token.");
			return false;
		}		
	}
	
	private boolean searchUser(String idToken, String email) {
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		
		try {
			conn = DriverManager.getConnection(dbAddress);
			//TODO may have to edit this statement. I am assuming email is the username
			ps = conn.prepareStatement("SELECT userID FROM User WHERE idToken=? AND username=?");
			ps.setString(1,  idToken);
			ps.setString(2, email);
			rs = ps.executeQuery();
			while(rs.next()) {
				Integer userID = rs.getInt("userID");
				System.out.println(userId);
				return userID != null;
			}
		}catch(SQLException sqle){
			
			System.out.println(sqle.getMessage());
		}finally {
			try {
				if(rs!=null) {
					rs.close();
				}
				if(ps!=null) {
					ps.close();
				}
				if(conn!=null) {
					conn.close();
				}
			}catch(SQLException sqle) {
				//TODO handle
				System.out.println(sqle.getMessage());
			}
		}
		
		return true;
	}

}
